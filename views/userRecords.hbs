<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Records</title>
    <link rel="stylesheet" href="/css/userRecords.css">
    <style>
        .action-buttons {
            margin-top: 10px;
        }

        .action-buttons button {
            display: inline-block;
            margin-right: 10px;
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .action-buttons button.edit-btn {
            background-color: #28a745;
        }

        .action-buttons button.delete-btn {
            background-color: #dc3545;
        }

        .action-buttons button:hover {
            opacity: 0.8;
        }

        .edit-form {
            display: none;
            margin-top: 10px;
        }

        .edit-form input {
            margin-right: 10px;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .edit-form button {
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .chart-container {
            width: 100%;
            max-width: 600px;
            margin: 20px auto;
        }
    </style>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <h1>User Records</h1>

       
        <div class="chart-container">
            <canvas id="weightChart"></canvas>
        </div>

        <div class="records">
            {{#each userRecords}}
            <div class="record-card">            
                <p><strong>Height:</strong> {{this.height}} cm</p>
                <p><strong>Weight:</strong> {{this.weight}} kg</p>
                <p><strong>Age:</strong> {{this.age}}</p>
                <p><strong>Gender:</strong> {{this.gender}}</p>
                <p><strong>Exercise per Week:</strong> {{this.exercise_per_week}} times</p>
                <p><strong>Protein:</strong> {{this.protein}}</p>
                <p><strong>Fat:</strong> {{this.fat}}</p>
                <p><strong>Carbohydrates:</strong> {{this.carbohydrates}}</p>
                <p><strong>Bmi:</strong> {{this.bmi}}</p>
                <p><strong>Tdee:</strong> {{this.tdee}}</p>
                <p><strong>Date:</strong> {{this.date}}</p>

               
                <div class="action-buttons">
                    <button class="edit-btn" data-info-id="{{this.info_id}}">Edit</button>
                    <button class="delete-btn" data-info-id="{{this.info_id}}">Delete</button>
                </div>

                
                <form class="edit-form" data-info-id="{{this.info_id}}">
                    <input type="text" name="height" placeholder="Enter new height" value="{{this.height}}">
                    <input type="text" name="weight" placeholder="Enter new weight" value="{{this.weight}}">
                    <input type="text" name="age" placeholder="Enter new age" value="{{this.age}}">
                    <input type="text" name="gender" placeholder="Enter new gender" value="{{this.gender}}">
                    <input type="number" name="exercise_per_week" placeholder="Enter new exercise per week" value="{{this.exercise_per_week}}">
                    
                    <button type="submit">Update</button>
                </form>
            </div>
            {{else}}
            <p>No records found.</p>
            {{/each}}
        </div>
        <a href="/profile" class="back-btn">Back to Profile</a>
    </div>

    <script>
       
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', async function() {
                const infoId = this.getAttribute('data-info-id');
                try {
                    const response = await fetch(`/user/records/${infoId}`, {
                        method: 'DELETE',
                    });
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Failed to delete the record');
                    }
                } catch (error) {
                    console.error('Error deleting record:', error);
                    alert('Error deleting the record');
                }
            });
        });

     
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', function() {
                const infoId = this.getAttribute('data-info-id');
                const form = document.querySelector(`.edit-form[data-info-id="${infoId}"]`);
                form.style.display = form.style.display === 'none' || form.style.display === '' ? 'block' : 'none';
            });
        });

      
        document.querySelectorAll('.edit-form').forEach(form => {
            form.addEventListener('submit', async function(event) {
                event.preventDefault();
                const infoId = this.getAttribute('data-info-id');
                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());
                try {
                    const response = await fetch(`/user/records/${infoId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                    });
                    if (response.ok) {
                        location.reload(); 
                    } else {
                        alert('Failed to update the record');
                    }
                } catch (error) {
                    console.error('Error updating record:', error);
                    alert('Error updating the record');
                }
            });
        });

        
       const weightData = [
        {{#each userRecords}}
            {{this.weight}}{{#unless @last}},{{/unless}}
        {{/each}}
          ]; 

        const labels = [
        {{#each userRecords}}
            "{{this.date}}"{{#unless @last}},{{/unless}}
        {{/each}}
         ];

    const ctx = document.getElementById('weightChart').getContext('2d');
    const weightChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Weight (kg)',
                data: weightData,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 2,
                fill: true,
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    display: true,
                    title: {
                        display: true,
                        text: 'Date',
                    }
                },
                y: {
                    display: true,
                    title: {
                        display: true,
                        text: 'Weight (kg)',
                    }
                }
            }
        }
    });
    </script>
</body>
</html>
